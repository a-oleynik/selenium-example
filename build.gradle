buildscript {
    ext {
        allureVersion = "2.29.0"
        aspectjVersion = "1.9.22.1"
        log4jVersion = "2.24.0"
        jacksonVersion = "2.17.2"
        seleniumVersion = "4.25.0"
        slf4jVersion = "2.0.16"
        testNGVersion = "7.10.2"
        lombokVersion = "1.18.34"
    }
}

plugins {
    id 'java-library'
    id('io.qameta.allure') version '2.12.0'
    id 'idea'
    id 'org.gradle.test-retry' version '1.5.10'
}

repositories {
    mavenLocal()
    mavenCentral()
}

description = "Gradle selenium example"
group 'com.oleynik.selenium.example'
version '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations.all {
    resolutionStrategy {
        force("org.slf4j:slf4j-api:$slf4jVersion",
                "org.apache.logging.log4j:log4j-api:$log4jVersion"
        )
    }
}

dependencies {
    implementation("org.testng:testng:$testNGVersion")
    implementation("io.qameta.allure:allure-testng:$allureVersion")
    implementation("io.qameta.allure:allure-java-commons:$allureVersion")
    implementation("org.aspectj:aspectjweaver:$aspectjVersion")
    implementation("org.seleniumhq.selenium:selenium-java:$seleniumVersion")
    implementation("org.aeonbits.owner:owner:1.0.12")
    implementation("org.apache.poi:poi-ooxml:5.3.0")
    implementation("com.opencsv:opencsv:5.9")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:$log4jVersion")
    implementation("org.slf4j:slf4j-simple:$slf4jVersion")
    implementation('org.assertj:assertj-core:3.26.3')
    implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

allure {
    version = allureVersion

    useTestNG {
        version = allureVersion
    }
}

task cleanAllureReport(type: Delete) {
    delete "build\\reports\\allure-report\\allureReport"
}

task excelReport(type: JavaExec) {
    description = "Collects and generate consolidated Excel report"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "com.oleynik.gradle.selenium.example.framework.utils.ReportUtils"
}

test {
    systemProperty "file.encoding", "utf-8"
    useTestNG {
        parallel = 'classes'
        threadCount = 3
        useDefaultListeners = true
        outputDirectory = file("$buildDir/reports/testng")
    }
    dependsOn cleanTest
    dependsOn cleanAllureReport
    testLogging.exceptionFormat = 'full'
    testLogging.showStandardStreams = true

    retry {
        failOnPassedAfterRetry = true
        maxFailures = 100
        maxRetries = 1
    }
}

test.finalizedBy allureReport, excelReport

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked"
    }
}
