buildscript {
    ext {
        allureVersion = "2.18.1"
        aspectjVersion = "1.9.9.1"
        log4jVersion = "2.18.0"
        jacksonVersion = "2.13.3"
        seleniumVersion = "4.3.0"
        slf4jVersion = "1.7.36"
        junit5Version = "5.9.0"
    }
}

plugins {
    id "java-library"
    id("io.qameta.allure") version "2.10.0"
    id 'idea'
}

repositories {
    mavenLocal()
    mavenCentral()
}

description = "Gradle selenium example"
group 'com.oleynik.selenium.example'
version '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations.all {
    resolutionStrategy {
        force("org.slf4j:slf4j-api:$slf4jVersion",
                "org.apache.logging.log4j:log4j-api:$log4jVersion"
        )
    }
}

dependencies {
    implementation("org.junit.jupiter:junit-jupiter-api:$junit5Version")
    implementation("org.junit.jupiter:junit-jupiter-engine:$junit5Version")
    implementation("org.junit.jupiter:junit-jupiter-params:$junit5Version")
    implementation("org.junit.platform:junit-platform-runner:1.9.0")
    implementation("io.qameta.allure:allure-junit5:$allureVersion")
    implementation("io.qameta.allure:allure-java-commons:$allureVersion")
    implementation("org.aspectj:aspectjweaver:$aspectjVersion")
    implementation("org.seleniumhq.selenium:selenium-java:$seleniumVersion")
    implementation("org.aeonbits.owner:owner:1.0.12")
    implementation("org.apache.poi:poi-ooxml:5.2.2")
    implementation("com.opencsv:opencsv:5.6")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:$log4jVersion")
    implementation("org.slf4j:slf4j-simple:$slf4jVersion")
    implementation("org.assertj:assertj-core:3.23.1")
    testCompileOnly("org.projectlombok:lombok:1.18.24")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.24")
}

allure {
    version = allureVersion

    useJUnit5 {
        version = allureVersion
    }
}

test {
    systemProperty "file.encoding", "utf-8"
    useJUnitPlatform {
    }
    testLogging.exceptionFormat = 'full'
    testLogging.showStandardStreams = true

    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
    systemProperty("junit.jupiter.execution.parallel.config.fixed.parallelism", "3")
    //systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    //systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
}

test.finalizedBy allureReport

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}
